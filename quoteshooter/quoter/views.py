from django.shortcuts import render, redirect
from django.urls import reverse
from django.views.decorators.http import require_POST
from django.http import JsonResponse

import json

from .models import Quote
from .forms import QuoteForm
from .utils.vote_actions import like_quote, dislike_quote

from core.logger import logger

def index(request):
    """
    –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.

    –õ–æ–≥–∏–∫–∞:
        1. –í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É —Å —É—á–µ—Ç–æ–º –≤–µ—Å–∞.
        2. –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤.
        3. –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —à–∞–±–ª–æ–Ω 'quoter/index.html' —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º {'quote': quote}.
    """
    quote = Quote.weighted_random()
    if quote:
        quote.increase_views()
        logger.info(f'–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ —Ü–∏—Ç–∞—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π: {quote.id}')
    return render(request, 'quoter/index.html', {'quote': quote})

def api_random_quote(request):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å–ª—É—á–∞–π–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã.
    """
    quote = Quote.weighted_random()
    if quote:
        quote.increase_views()
        data = {
            'quote': {
                'id': quote.id,
                'text': quote.text,
                'source': str(quote.source),
                'views_cnt': quote.views_cnt,
                'likes': quote.likes,
                'dislikes': quote.dislikes,
                'weight': float(quote.weight)
            }
        }
        logger.info(f'API –≤–µ—Ä–Ω—É–ª —Ü–∏—Ç–∞—Ç—É: {quote.id}')
    else:
        data = {'quote': None}
        logger.info('API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—É—é —Ü–∏—Ç–∞—Ç—É.')
    return JsonResponse(data)

def top_quotes_view(request, num_id, by='views'):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–æ–ø-N —Ü–∏—Ç–∞—Ç –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º –∏–ª–∏ –ª–∞–π–∫–∞–º.

    Args:
        request (HttpRequest)
        num_id (int): –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ç–∞—Ç
        by (str): 'views' –∏–ª–∏ 'likes'

    Returns:
        HttpResponse: —Ä–µ–Ω–¥–µ—Ä —à–∞–±–ª–æ–Ω–∞ 'quoter/top.html'
    """
    if by == 'views':
        field = 'views_cnt'
        icon = 'üî•'
        title_text = f'–¢–æ–ø {num_id} —Ü–∏—Ç–∞—Ç –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º'
    else:
        field = 'likes'
        icon = '‚ù§Ô∏è'
        title_text = f'–¢–æ–ø {num_id} —Ü–∏—Ç–∞—Ç –ø–æ –ª–∞–π–∫–∞–º'

    quotes = Quote.objects.order_by(f'-{field}')[:num_id]
    logger.info(f'–û—Ç–æ–±—Ä–∞–∂–µ–Ω —Ç–æ–ø-{num_id} —Ü–∏—Ç–∞—Ç –ø–æ {field}')

    return render(request, 'quoter/top.html', {
        'quotes': quotes,
        'num_id': num_id,
        'title_icon': icon,
        'title_text': title_text
    })

def top_10_view(request):
    logger.info('–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ç–æ–ø-10 –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º')
    return redirect(reverse('top', args=(10,)), permanent=True)

def top_10_like(request):
    logger.info('–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ç–æ–ø-10 –ø–æ –ª–∞–π–∫–∞–º')
    return redirect(reverse('top_likes', args=(10,)), permanent=True)

def page_not_found(request, exception):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ 404 –æ—à–∏–±–∫–∏.

    Args:
         request (HttpRequest): –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞.
         exception (Exception): –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –≤—ã–∑–≤–∞–≤—à–µ–µ 404.

    Returns:
        HttpResponse: —Ä–µ–Ω–¥–µ—Ä —à–∞–±–ª–æ–Ω–∞ 'quoter/404.html'.
    """
    logger.warning(f'404 –æ—à–∏–±–∫–∞: {request.path}')
    return render(request, 'quoter/404.html')

def add_new(request):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–∏—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É:

        1. –ï—Å–ª–∏ –º–µ—Ç–æ–¥ POST:
            - –°–æ–∑–¥–∞–µ—Ç —Ñ–æ—Ä–º—É —Å POST-–¥–∞–Ω–Ω—ã–º–∏.
            - –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ –≤–∞–ª–∏–¥–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç Quote –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é.
        2. –ï—Å–ª–∏ –º–µ—Ç–æ–¥ GET:
            - –°–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç—É—é —Ñ–æ—Ä–º—É.
        3. –†–µ–Ω–¥–µ—Ä–∏—Ç —à–∞–±–ª–æ–Ω 'quoter/add.html' —Å —Ñ–æ—Ä–º–æ–π.
    """
    if request.method == "POST":
        form = QuoteForm(request.POST)
        if form.is_valid():

            from django.db import IntegrityError
            from django.core.exceptions import ValidationError

            try:
                form.save()

            except IntegrityError as e:
                logger.warning(f'IntegrityError –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã: {e}')
                form.add_error(None, '–¢–∞–∫–∞—è —Ü–∏—Ç–∞—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')

            except ValidationError as e:
                msgs = getattr(e, 'messages', None) or [str(e)]
                for m in msgs:
                    form.add_error(None, m)
                logger.warning(f'ValidationError –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã: {e}')

            except Exception as e:

                logger.exception(f'–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã: {e}')
                form.add_error(None, '–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.')

            else:
                logger.info(f'–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ü–∏—Ç–∞—Ç–∞.')
                return redirect('home')
        else:
            logger.warning('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã')
    else:
        form = QuoteForm()

    return render(request, 'quoter/add.html', {'form': form})

@require_POST
def like(request, quote_id):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∞–π–∫–∞ —Ü–∏—Ç–∞—Ç—ã.

    Args:
        request (HttpRequest): –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞.
        quote_id (int): ID —Ü–∏—Ç–∞—Ç—ã.

    Returns:
        JsonResponse: –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è likes –∏ dislikes.
    """
    logger.info(f'–õ–∞–π–∫ –¥–ª—è —Ü–∏—Ç–∞—Ç—ã {quote_id}')
    return like_quote(request, quote_id)

@require_POST
def dislike(request, quote_id):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∑–ª–∞–π–∫–∞ —Ü–∏—Ç–∞—Ç—ã.

    Args:
        request (HttpRequest): –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞.
        quote_id (int): ID —Ü–∏—Ç–∞—Ç—ã.

    Returns:
        JsonResponse: –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è likes –∏ dislikes.
    """
    logger.info(f'–î–∏–∑–ª–∞–π–∫ –¥–ª—è —Ü–∏—Ç–∞—Ç—ã {quote_id}')
    return dislike_quote(request, quote_id)

@require_POST
def update_weight(request, quote_id):
    try:
        data = json.loads(request.body)
        new_weight = float(data.get("weight", 0))
        if not (0 <= new_weight <= 100):
            return JsonResponse({"success": False, "error": "–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100."})

        quote = Quote.objects.get(pk=quote_id)
        quote.weight = new_weight
        quote.save(update_fields=["weight"])
        logger.info(f"–í–µ—Å —Ü–∏—Ç–∞—Ç—ã {quote.id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {new_weight:.2f}")
        return JsonResponse({"success": True, "weight": new_weight})
    except Quote.DoesNotExist:
        return JsonResponse({"success": False, "error": "–¶–∏—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."})
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–µ—Å–∞: {e}")
        return JsonResponse({"success": False, "error": "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."})