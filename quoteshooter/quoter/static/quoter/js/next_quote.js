document.addEventListener('DOMContentLoaded', () => {
    const nextBtn = document.getElementById('next-quote');
    if (!nextBtn) return;

    nextBtn.addEventListener('click', async () => {
        nextBtn.disabled = true;
        try {
            const res = await fetch('/api/quote/random/');
            if (!res.ok) throw new Error(`HTTP ${res.status}`);
            const payload = await res.json();

            if (!payload.quote) {
                alert('–¶–∏—Ç–∞—Ç –ø–æ–∫–∞ –Ω–µ—Ç üò¢');
                return;
            }

            const q = payload.quote;
            const card = document.querySelector('.quote-card');
            if (!card) throw new Error('–ö–∞—Ä—Ç–æ—á–∫–∞ —Ü–∏—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ DOM');

            const textEl = card.querySelector('.quote-text');
            const sourceEl = card.querySelector('.quote-source');
            const statEl = card.querySelector('.stat');
            const likeCountEl = card.querySelector('.like-count');
            const dislikeCountEl = card.querySelector('.dislike-count');
            const likeForm = card.querySelector('.like-form');
            const dislikeForm = card.querySelector('.dislike-form');

            if (textEl) textEl.textContent = q.text;
            if (sourceEl) sourceEl.textContent = '‚Äî ' + q.source;
            if (statEl) statEl.textContent = 'üëÅ ' + q.views_cnt;
            if (likeCountEl) likeCountEl.textContent = q.likes;
            if (dislikeCountEl) dislikeCountEl.textContent = q.dislikes;
            if (likeForm) likeForm.setAttribute('data-id', q.id);
            if (dislikeForm) dislikeForm.setAttribute('data-id', q.id);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã:', err);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã. –°–º–æ—Ç—Ä–∏ –∫–æ–Ω—Å–æ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.');
        } finally {
            nextBtn.disabled = false;
        }
    });
});
